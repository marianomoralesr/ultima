Hello Supabase AI Assistant,

I need to add new CRM and lead management capabilities to my existing Supabase project without performing a destructive migration. All existing tables, data, and RLS policies should remain intact. Please generate the necessary SQL to implement the following changes:

1.  **Update an Existing Enum Type:**
    *   Please add a new option `sales` to my existing `public.user_role` enum type. The existing values are 'user' and 'admin'.

2.  **Create New Tables for Lead Management:**
    *   **`lead_tags`**: A table to define tags that can be applied to leads.
        *   `id`: `uuid`, primary key, default `gen_random_uuid()`
        *   `tag_name`: `text`, not null, unique
        *   `color`: `text` (e.g., hex code like '#4299e1'), not null
        *   `created_at`: `timestamptz`, default `now()`
    *   **`lead_tag_associations`**: A join table to link tags to user profiles (leads).
        *   `lead_id`: `uuid`, foreign key referencing `public.profiles(id)` on delete cascade
        *   `tag_id`: `uuid`, foreign key referencing `public.lead_tags(id)` on delete cascade
        *   Primary key should be on `(lead_id, tag_id)`
    *   **`lead_reminders`**: A table for agents to set follow-up reminders for a lead.
        *   `id`: `uuid`, primary key, default `gen_random_uuid()`
        *   `lead_id`: `uuid`, foreign key referencing `public.profiles(id)` on delete cascade
        *   `agent_id`: `uuid`, foreign key referencing `auth.users(id)` on delete set null
        *   `reminder_text`: `text`, not null
        *   `reminder_date`: `timestamptz`, not null
        *   `is_completed`: `boolean`, default `false`
        *   `created_at`: `timestamptz`, default `now()`

3.  **Implement Row Level Security (RLS) Policies:**
    *   **For `lead_tags`, `lead_tag_associations`, and `lead_reminders`:**
        *   Enable RLS.
        *   Create a policy allowing `admin` and `sales` roles to perform all actions (SELECT, INSERT, UPDATE, DELETE). Check against `public.get_my_role()`.
        *   Ensure regular users (`role = 'user'`) have NO access to these tables.
    *   **For `profiles`:**
        *   Add a new policy or update an existing one to allow users with the `sales` role to SELECT and UPDATE all profiles.
    *   **For `financing_applications` and `uploaded_documents`:**
        *   Add a new policy or update an existing one to allow users with the `sales` role to SELECT all records.

4.  **Update an RPC Function:**
    *   My existing function `public.get_leads_with_details()` is used by admins. Please ensure its security definer context allows it to be executed by users with the `sales` role as well. Or, suggest a new, secure version of this function called `get_leads_for_dashboard()` that is callable by both `admin` and `sales` roles.

Please provide the SQL script to apply these changes additively. Thank you!